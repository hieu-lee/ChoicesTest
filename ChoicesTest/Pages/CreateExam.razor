@page "/exam-create/{ExamName}"
@page "/exam-create/{ExamName}/{TitleSeted:bool}/{Title}/{minutes:int}"
@using ChoicesTest.Models;
@using ChoicesTest.Components;
@using Microsoft.Data.Sqlite;
@inject IJSRuntime JsRuntime
@inject NavigationManager navigationManager


@if (!TitleSeted)
{
    <h3>Set title for your new exam</h3>
    <input type="text" class="title-box" @bind="Title" placeholder="Title" style="margin-left: 0;"><br />
    <button @onclick="SetTitle" class="btn btn-primary" style="margin-top: 20px;">Confirm</button>
}


@if (TitleSeted)
{
    <h1>@Title</h1>
    <h5 style="text-align:center; display:@TimeDisplay;">Time limit: @minutes.ToString() minutes</h5>
    <ul>
        @foreach (QuestionInfo ques in questions)
        {
            <li>
                <Question number="@ques.number" question="@ques.question" answerA="@ques.answerA" answerB="@ques.answerB" answerC="@ques.answerC" answerD="@ques.answerD">
                </Question>
            </li>
        }
    </ul>
    <hr />
    <div>
        <textarea @bind="NewTitle" placeholder="Question @CurrentQuestionNumber.ToString()" style="width: 462px; outline: none; height: 30px;"></textarea>
        <div class="new-answers" style="margin-top: 10px;">
            <div><input name="choice" type="radio" @onclick="() => { ChoiceA = true; ChoiceB = false; ChoiceC = false; ChoiceD = false; }" /><textarea class="answer-box" placeholder="Answer A" @bind="NewAnswerA" /></div>
            <div style="margin-top: 10px;"><input name="choice" type="radio" @onclick="() => { ChoiceB = true; ChoiceA = false; ChoiceC = false; ChoiceD = false; }" /><textarea class="answer-box" placeholder="Answer B" @bind="NewAnswerB" /></div>
            <div style="margin-top: 10px;"><input name="choice" type="radio" @onclick="() => { ChoiceC = true; ChoiceB = false; ChoiceA = false; ChoiceD = false; }" /><textarea class="answer-box" placeholder="Answer C" @bind="NewAnswerC" /></div>
            <div style="margin-top: 10px;"><input name="choice" type="radio" @onclick="() => { ChoiceD = true; ChoiceB = false; ChoiceC = false; ChoiceA = false; }" /><textarea class="answer-box" placeholder="Answer D" @bind="NewAnswerD" /></div>
        </div>
    </div>
    <br />
    <button class="btn btn-primary" @onclick="CreateNewQuestion">Add Question</button>
    <button class="btn btn-danger" style="margin-left: 10px;" @onclick="DeleteExam">Delete</button>
    <div style="margin-top: 15px;">
        <input class="title-box" style="width: 123px;" type="number" @bind="minutes" min="5" max="300" placeholder="Minutes"/><br />
        <button class="btn btn-primary" style="margin-top: 20px; margin-bottom: 10px;" @onclick="SetTime">Set time limit</button>
    </div>
}


@code {
    [Parameter]
    public string ExamName { get; set; } = "exam";

    [Parameter]
    public bool TitleSeted { get; set; } = false;

    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    public int minutes { get; set; } = 0;

    private int prevTimeLimit = 0;
    private string TimeDisplay = "none";
    private SqliteConnection connection;
    private bool ChoiceA = false;
    private bool ChoiceB = false;
    private bool ChoiceC = false;
    private bool ChoiceD = false;
    private string NewTitle = string.Empty;
    private string NewAnswerA = string.Empty;
    private string NewAnswerB = string.Empty;
    private string NewAnswerC = string.Empty;
    private string NewAnswerD = string.Empty;
    private string Answer;
    private List<QuestionInfo> questions = new List<QuestionInfo>();
    private int CurrentQuestionNumber = 1;

    protected override async Task OnInitializedAsync()
    {
        if (TitleSeted)
        {
            await CreateNewDb();
        }
        SetTime();
    }

    private async Task InsertNewExamAsync()
    {
        var task = connection.OpenAsync();
        var cmd = connection.CreateCommand();
        cmd.CommandText = $"INSERT INTO exam_collection(code, name, time) VALUES('{ExamName}', '{Title}', 0);";
        await task;
        cmd.ExecuteNonQuery();
        connection.Close();
    }

    private async Task CreateNewDb()
    {
        var connectionStringBuilder = new SqliteConnectionStringBuilder();
        connectionStringBuilder.DataSource = "exams.db";
        connection = new SqliteConnection(connectionStringBuilder.ConnectionString);
        var task = connection.OpenAsync();
        var tablecmd = connection.CreateCommand();
        tablecmd.CommandText = $"CREATE TABLE IF NOT EXISTS {ExamName}(id INTEGER PRIMARY KEY, title TEXT, answer_a TEXT, answer_b TEXT, answer_c TEXT, answer_d TEXT, answer TEXT);";
        await task;
        tablecmd.ExecuteNonQuery();
        var myCmd = connection.CreateCommand();
        try
        {
            myCmd.CommandText = $"SELECT * FROM {ExamName}";
            using var rdr = myCmd.ExecuteReader();
            while (rdr.Read())
            {
                questions.Add(new QuestionInfo() { number = rdr.GetInt32(0), question = rdr.GetString(1), answerA = rdr.GetString(2), answerB = rdr.GetString(3), answerC = rdr.GetString(4), answerD = rdr.GetString(5), answer = rdr.GetString(6) });
                CurrentQuestionNumber++;
            }
        }
        catch (Exception) { };
        connection.Close();
    }

    private async void SetTitle()
    {
        if (string.IsNullOrWhiteSpace(Title))
        {
            await JsRuntime.InvokeAsync<object>("alert", "Please set a title for your new exam.");
            return;
        }
        else
        {
            Title.Trim();
            Title = Title.First().ToString().ToUpper() + Title.Substring(1);
            TitleSeted = true;
            await CreateNewDb();
            await InsertNewExamAsync();
            StateHasChanged();
        }
    }

    private async Task InsertQuestionAsync(QuestionInfo info)
    {
        var task = connection.OpenAsync();
        var insertCmd = connection.CreateCommand();
        insertCmd.CommandText = $"INSERT INTO {ExamName}(id, title, answer_a, answer_b, answer_c, answer_d, answer) VALUES({info.number},'{info.question}', '{info.answerA}', '{info.answerB}', '{info.answerC}', '{info.answerD}', '{info.answer}')";
        await task;
        insertCmd.ExecuteNonQuery();
        connection.Close();
    }

    private void SetAnswer()
    {
        if (ChoiceA)
        {
            Answer = "A";
            ChoiceA = false;
            return;
        }
        if (ChoiceB)
        {
            Answer = "B";
            ChoiceB = false;
            return;
        }
        if (ChoiceC)
        {
            Answer = "C";
            ChoiceC = false;
            return;
        }
        if (ChoiceD)
        {
            Answer = "D";
            ChoiceD = false;
            return;
        }
    }

    private async void DeleteExam()
    {
        var task = connection.OpenAsync();
        var tablecmd = connection.CreateCommand();
        tablecmd.CommandText = $"DROP TABLE {ExamName}";
        await task;
        tablecmd.ExecuteNonQuery();
        await JsRuntime.InvokeAsync<object>("alert", "Successfully deleted the exam.");
        navigationManager.NavigateTo($"/removed/{ExamName}");
    }

    private async void SetTime()
    {
        if (minutes > 0 && minutes != prevTimeLimit)
        {
            var task = connection.OpenAsync();
            var cmd = connection.CreateCommand();
            cmd.CommandText = $"UPDATE exam_collection SET time = {minutes} WHERE code = '{ExamName}';";
            await task;
            cmd.ExecuteNonQuery();
            connection.Close();
            TimeDisplay = "block";
            prevTimeLimit = minutes;
        }
        else if (minutes == 0)
        {
            TimeDisplay = "none";
            prevTimeLimit = 0;
        }
    }

    private async void CreateNewQuestion()
    {
        if (CurrentQuestionNumber == 100)
        {
            await JsRuntime.InvokeAsync<object>("alert", "You have reached the maximum number of questions for this exam!");
            return;
        }
        if (!string.IsNullOrWhiteSpace(NewTitle) && !string.IsNullOrWhiteSpace(NewAnswerA) && !string.IsNullOrWhiteSpace(NewAnswerB) && !string.IsNullOrWhiteSpace(NewAnswerC) && !string.IsNullOrWhiteSpace(NewAnswerD))
        {
            if (NewTitle.Contains('\'') || NewAnswerA.Contains('\'') || NewAnswerB.Contains('\'') || NewAnswerC.Contains('\'') || NewAnswerD.Contains('\''))
            {
                await JsRuntime.InvokeAsync<object>("alert", "The question must not contain special characters");
                return;
            }
            if (ChoiceA || ChoiceB || ChoiceC || ChoiceD)
            {
                var Answers = new HashSet<string>();
                NewTitle.Trim();
                NewAnswerA.Trim();
                NewAnswerB.Trim();
                NewAnswerC.Trim();
                NewAnswerD.Trim();
                Answers.Add(NewAnswerA);
                Answers.Add(NewAnswerB);
                Answers.Add(NewAnswerC);
                Answers.Add(NewAnswerD);
                if (Answers.Count < 4)
                {
                    await JsRuntime.InvokeAsync<object>("alert", "Your given answers must be different from each other.");
                    return;
                }
                SetAnswer();
                if (NewTitle.Last() != '?')
                {
                    NewTitle += "?";
                }
                NewTitle = NewTitle.First().ToString().ToUpper() + NewTitle.Substring(1);
                var NewQuestion = new QuestionInfo() { question = NewTitle, number = CurrentQuestionNumber, answerA = NewAnswerA, answerB = NewAnswerB, answerC = NewAnswerC, answerD = NewAnswerD, answer = Answer };
                var task1 = InsertQuestionAsync(NewQuestion);
                questions.Add(NewQuestion);
                NewTitle = string.Empty;
                NewAnswerA = string.Empty;
                NewAnswerB = string.Empty;
                NewAnswerC = string.Empty;
                NewAnswerD = string.Empty;
                CurrentQuestionNumber++;
                await task1;
            }
            else
            {
                await JsRuntime.InvokeAsync<object>("alert", "Please choose a correct answer to the question.");
            }
        }
        else
        {
            await JsRuntime.InvokeAsync<object>("alert", "Please fill in all parts of the new question.");
        }
    }
}
