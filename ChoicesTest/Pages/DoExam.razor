@page "/do-exam/{ExamCode}/{ExamName}/{minutes:int}/{questionLabel}"
@page "/do-exam/{ExamCode}/{ExamName}"
@using ChoicesTest.Components;
@using ChoicesTest.Models;
@using Microsoft.Data.Sqlite;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using System.Timers;
@using ChoicesTest.Data;
@inject IJSRuntime JsRuntime
@inject NavigationManager navigationManager
@inject ProtectedSessionStorage sessionStorage
@inject AppData appData

<h1>@ExamName</h1>
<h5 style="text-align:center; display:@TimeDisplay;">Time limit: @minutes.ToString() minutes</h5>
<ul>
    <Virtualize Items="@questions" Context="ques">
        <li style="background-color:@ques.color;">
            <Question label="@questionLabel" personalWork="@personalWork" number="@ques.number" question="@ques.question" answerA="@ques.answerA" answerB="@ques.answerB" answerC="@ques.answerC" answerD="@ques.answerD">
            </Question>
            <div style="color:white; display:@ques.answerDisplay; margin-top: 5px;">Correct answer: @ques.answer</div>
            <hr />
        </li>
    </Virtualize>
</ul>
<div class="button-holder">
    <MatButton Unelevated="true" @onclick="ShowScore">Submit</MatButton>
</div>

@code {
    [Parameter]
    public string ExamCode { get; set; }
    [Parameter]
    public string ExamName { get; set; }
    [Parameter]
    public int minutes { get; set; } = 0;
    [Parameter]
    public string questionLabel { get; set; } = "Question";

    private bool Privacy = false;
    private bool haveQuesions = false;
    private int TimeLeft;
    private static Timer timer;
    private string TimeDisplay = "none";
    private string user;
    private List<string> colors = new();
    public Dictionary<int, char> personalWork = new Dictionary<int, char>();
    private Dictionary<int, char> solutionKey = new Dictionary<int, char>();
    private List<QuestionInfo> questions = new List<QuestionInfo>();
    private SqliteConnection connection;
    private bool submitted = false;

    private async void CountDown(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (TimeLeft > 1)
        {
            TimeLeft -= 1;
        }
        else
        {
            timer.Enabled = false;
            await InvokeAsync(ShowScore);
        }
    }

    private void StartTimer()
    {
        if (!submitted)
        {
            TimeLeft = minutes;
            timer = new(60000);
            timer.Elapsed += CountDown;
            timer.Enabled = true;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        submitted = false;
        await LoadExam();
        Privacy = await appData.GetExamPrivacyAsync(ExamCode);
        if (minutes > 0)
        {
            StartTimer();
        }
    }

    private void LoadUser()
    {
        user = appData.account;
    }

    private async Task LoadExam()
    {
        var connectionStringBuilder = new SqliteConnectionStringBuilder();
        connectionStringBuilder.DataSource = "exams.db";
        connection = new SqliteConnection(connectionStringBuilder.ConnectionString);
        var task = connection.OpenAsync();
        var myCmd = connection.CreateCommand();
        await task;
        try
        {
            myCmd.CommandText = $"SELECT * FROM {ExamCode}";
            using var rdr = myCmd.ExecuteReader();
            while (rdr.Read())
            {
                solutionKey.Add(rdr.GetInt32(0), rdr.GetChar(6));
                questions.Add(new QuestionInfo() { number = rdr.GetInt32(0), question = rdr.GetString(1), answerA = rdr.GetString(2), answerB = rdr.GetString(3), answerC = rdr.GetString(4), answerD = rdr.GetString(5), answer = rdr.GetString(6) });
                haveQuesions = true;
            }
        }
        catch (Exception) { };
        connection.Close();
        if (minutes > 0)
        {
            TimeDisplay = "block";
            StateHasChanged();
        }
    }

    private async void ShowScore()
    {
        if (submitted)
        {
            return;
        }
        if (minutes > 0)
        {
            timer.Enabled = false;
        }
        submitted = true;
        if (haveQuesions)
        {
            LoadUser();
            var score = 0;
            var max = 0;
            if (!Privacy)
            {
                Parallel.ForEach(solutionKey.Keys, qnum =>
                {
                    max++;
                    try
                    {
                        if (solutionKey[qnum] == personalWork[qnum])
                        {
                            questions[qnum - 1].color = "#95FF80";
                            score++;
                        }
                        else
                        {
                            questions[qnum - 1].color = "#FF4D6A";
                            questions[qnum - 1].answerDisplay = "block";
                        }
                    }
                    catch (Exception)
                    {
                        questions[qnum - 1].color = "#FF4D6A";
                        questions[qnum - 1].answerDisplay = "block";
                    }
                });
            }
            else
            {
                Parallel.ForEach(solutionKey.Keys, qnum =>
                {
                    max++;
                    try
                    {
                        if (solutionKey[qnum] == personalWork[qnum])
                        {
                            score++;
                        }
                    }
                    catch (Exception)
                    {
                    }
                });
            }
            var percent = Convert.ToDouble(score) / Convert.ToDouble(max);
            percent *= 100.0;
            var res = Math.Round(percent, 2);
            var task2 = JsRuntime.InvokeAsync<object>("alert", $"You got {score.ToString()}/{max.ToString()} answers correct, and a result of {res.ToString()}%");
            var task3 = connection.OpenAsync();
            var myCmd = connection.CreateCommand();
            var myCmd1 = connection.CreateCommand();
            myCmd.CommandText = $"INSERT INTO {user}(exam, score, time) VALUES('{ExamCode}', {res}, '{DateTime.Now.ToString()}')";
            myCmd1.CommandText = $"INSERT INTO history(username, exam, score, time) VALUES('{user}', '{ExamCode}', {res}, '{DateTime.Now.ToString()}')";
            await task3;
            myCmd.ExecuteNonQuery();
            myCmd1.ExecuteNonQuery();
            connection.Close();
            StateHasChanged();
            await task2;
        }
        else
        {
            await JsRuntime.InvokeAsync<object>("alert", "This exam does not have any question");
        }
    }
}
