@page "/do-exam/{ExamCode}/{ExamName}/{questionLabel}"
@page "/do-exam/{ExamCode}/{ExamName}"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using ChoicesTest.Components;
@using ChoicesTest.Models;
@using System.Timers;
@using ChoicesTest.Data;
@using MongoDB.Driver;
@inject IJSRuntime JsRuntime
@inject NavigationManager navigationManager
@inject AppData appData
@inject ProtectedLocalStorage localStorage


@if (loading)
{
    <p>Loading data...</p>
    <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Medium" />
}
else
{
    if (verify)
    {
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12 mat-elevation-z5 index-row-item mdc-theme--surface" style="padding: 10px; margin-bottom: 20px;">
            <h1>@ExamName</h1>
            <h5 style="text-align:center; display:@TimeDisplay;">Time limit: @minutes.ToString() minutes</h5>
            <ul>
                <Virtualize Items="@questions" Context="ques">
                    <li style="background-color:@ques.color;">
                        <Question label="@questionLabel" personalWork="@personalWork" number="@ques.id" question="@ques.question" answerA="@ques.answerA" answerB="@ques.answerB" answerC="@ques.answerC" answerD="@ques.answerD">
                        </Question>
                        <div style="color:white; display:@ques.answerDisplay; margin-top: 5px;">Correct answer: @ques.answer</div>
                    </li>
                </Virtualize>
            </ul>
            <div class="button-holder">
                <MatButton Unelevated="true" @onclick="ShowScore">Submit</MatButton>
            </div>
        </div>
    }
    else
    {
        <h1>Welcome to Exam Access</h1>
        <h4>You have to log in to do exam</h4>
    }
}


@code {
    [Parameter]
    public string ExamCode { get; set; }
    [Parameter]
    public string ExamName { get; set; }
    [Parameter]
    public string questionLabel { get; set; } = "Question";

    private bool admin = false;
    private bool loading = true;
    private IMongoCollection<QuestionInfo> myExamDb;
    private IMongoCollection<ExamResult> myUserDb;
    private int minutes;
    private bool verify = false;
    private bool Privacy = false;
    private bool haveQuesions = false;
    private int TimeLeft;
    private static Timer timer;
    private string TimeDisplay = "none";
    private string user;
    private List<string> colors = new();
    public Dictionary<int, string> personalWork = new();
    private Dictionary<int, string> solutionKey = new();
    private List<QuestionInfo> questions = new List<QuestionInfo>();
    private bool submitted = false;

    private async void CountDown(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (TimeLeft > 1)
        {
            TimeLeft -= 1;
        }
        else
        {
            timer.Enabled = false;
            await InvokeAsync(ShowScore);
        }
    }

    private void StartTimer()
    {
        if (!submitted)
        {
            TimeLeft = minutes;
            timer = new(60000);
            timer.Elapsed += CountDown;
            timer.Enabled = true;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        bool logged = false;
        try
        {
            var res = await localStorage.GetAsync<bool>("logged");
            var res1 = await localStorage.GetAsync<bool>("admin");
            var res2 = await localStorage.GetAsync<string>("account");
            if (res.Success && res1.Success && res2.Success)
            {
                logged = res.Value;
                verify = logged;
                loading = false;
                admin = res1.Value;
                user = res2.Value;
                StateHasChanged();
            }
            else
            {
                loading = false;
            }
        }
        catch (InvalidOperationException)
        {
            return;
        }
        submitted = false;
        if (logged)
        {
            verify = true;
            var task = appData.GetExamPrivacyAndTimeAsync(ExamCode);
            LoadExam();
            var info = await task;
            minutes = info.Item1;
            Privacy = info.Item2;
            if (minutes > 0)
            {
                TimeDisplay = "block";
                StartTimer();
            }
        }

    }

    private void LoadExam()
    {
        myExamDb = appData.examdb.GetCollection<QuestionInfo>(ExamCode);
        var questionCollection = myExamDb.Find(s => true);
        questions = questionCollection.ToList();
        Parallel.ForEach(questions, ques =>
        {
            if (!solutionKey.ContainsKey(ques.id))
            {
                haveQuesions = true;
                solutionKey.Add(ques.id, ques.answer);
            }
        });
        StateHasChanged();
        myUserDb = appData.examdb.GetCollection<ExamResult>(user);
    }

    private async void ShowScore()
    {
        if (submitted)
        {
            return;
        }
        if (minutes > 0)
        {
            timer.Enabled = false;
        }
        submitted = true;
        if (haveQuesions)
        {
            var score = 0;
            var max = 0;
            if (!Privacy)
            {
                Parallel.ForEach(solutionKey.Keys, qnum =>
                {
                    max++;
                    try
                    {
                        if (solutionKey[qnum] == personalWork[qnum])
                        {
                            questions[qnum - 1].color = "#95FF80";
                            score++;
                        }
                        else
                        {
                            questions[qnum - 1].color = "#FF4D6A";
                            questions[qnum - 1].answerDisplay = "block";
                        }
                    }
                    catch (Exception)
                    {
                        questions[qnum - 1].color = "#FF4D6A";
                        questions[qnum - 1].answerDisplay = "block";
                    }
                });
            }
            else
            {
                Parallel.ForEach(solutionKey.Keys, qnum =>
                {
                    max++;
                    try
                    {
                        if (solutionKey[qnum] == personalWork[qnum])
                        {
                            score++;
                        }
                    }
                    catch (Exception)
                    {
                    }
                });
            }
            var percent = Convert.ToDouble(score) / Convert.ToDouble(max);
            percent *= 100.0;
            var res = Math.Round(percent, 2);
            var task2 = JsRuntime.InvokeAsync<object>("alert", $"You got {score.ToString()}/{max.ToString()} answers correct, and a result of {res.ToString()}%");
            var localrecord = new ExamResult() { examCode = ExamCode, score = res, time = DateTime.Now.ToString() };
            var universalrecord = new Record() { username = user, examCode = ExamCode, score = res, time = DateTime.Now.ToString() };
            List<Task> tasks = new();
            if (!admin)
            {
                var task3 = myUserDb.InsertOneAsync(localrecord);
                tasks.Add(task3);
            }
            var task4 = appData.history.InsertOneAsync(universalrecord);
            tasks.Add(task4);
            //var task3 = connection.OpenAsync();
            //var myCmd = connection.CreateCommand();
            //var myCmd1 = connection.CreateCommand();
            //myCmd.CommandText = $"INSERT INTO {user}(exam, score, time) VALUES('{ExamCode}', {res}, '{DateTime.Now.ToString()}')";
            //myCmd1.CommandText = $"INSERT INTO history(username, exam, score, time) VALUES('{user}', '{ExamCode}', {res}, '{DateTime.Now.ToString()}')";
            //await task3;
            //myCmd.ExecuteNonQuery();
            //myCmd1.ExecuteNonQuery();
            //connection.Close();
            StateHasChanged();
            await task2;
            foreach (var t in tasks)
            {
                await t;
            }
        }
        else
        {
            await JsRuntime.InvokeAsync<object>("alert", "This exam does not have any question");
        }
    }
}
