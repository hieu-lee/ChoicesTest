@page "/"
@page "/home"
@page "/removed/{RemovedExam}"
@page "/{DoExam:bool}"
@using Microsoft.Data.Sqlite;
@inject NavigationManager navigationManager;
@inject IJSRuntime JsRuntime;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject ProtectedSessionStorage sessionStorage;

<h1>Welcome @user to Exam Access</h1>
@if (!string.IsNullOrWhiteSpace(user))
{
    <h5>Available exams:</h5>
    @if (!DoExam)
    { 
        if (Exams.Count == 0)
        {
            <ul>
                <li>There is no exam avaible yet.</li>
            </ul>
        }
        else
        {
            <ul>
                @foreach (string name in Exams.Keys)
                {
                    <li><a href="/exam-create/@name/true/@Exams[name]"><img src="document.png" /></a><p>Code: @name<br />Name: @Exams[name]</p></li>
                }
            </ul>
        }
        <hr />
        <h3>Add new exam</h3>
        <input @bind="NewExamCode" type="text" placeholder="New examcode">
        <br />
        <button class="btn btn-primary" style="margin-top: 10px;" @onclick="CreateNewExam">Add new exam</button>
    }
    else
    {
        if (Exams.Count == 0)
        {
            <ul>
                <li>There is no exam avaible yet.</li>
            </ul>
        }
        else
        {
            <ul>
                @foreach (string name in Exams.Keys)
                {
                    <li><a href="/do-exam/@name/@Exams[name]"><img src="document.png" /></a><p>Code: @name<br />Name: @Exams[name]</p></li>
                }
            </ul>
        }
    }
}
else
{
    <h3>Log in to start using Exam Access</h3>
}





@code {
    [Parameter]
    public bool DoExam { get; set; } = false;
    [Parameter]
    public string RemovedExam { get; set; } = null;
    private string user = string.Empty;
    private string NewExamCode;
    private SqliteConnection connection;
    private Dictionary<string, string> Exams = new();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            var result = await sessionStorage.GetAsync<string>("user");
            if (result.Success)
            {
                user = result.Value;
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            user = string.Empty;
            await sessionStorage.DeleteAsync("user");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var connectionStringBuilder = new SqliteConnectionStringBuilder();
        connectionStringBuilder.DataSource = "exams.db";
        connection = new SqliteConnection(connectionStringBuilder.ConnectionString);
        var task = connection.OpenAsync();
        var myCmd = connection.CreateCommand();
        var myCmd2 = connection.CreateCommand();
        myCmd2.CommandText = "CREATE TABLE IF NOT EXISTS accounts(username TEXT PRIMARY KEY, password TEXT, name TEXT);";
        if (RemovedExam is not null)
        {
            myCmd.CommandText = $"DELETE FROM exam_collection WHERE code = '{RemovedExam}';";
        }
        else
        {
            myCmd.CommandText = "CREATE TABLE IF NOT EXISTS exam_collection(code TEXT PRIMARY KEY, name TEXT);";
        }
        await task;
        myCmd.ExecuteNonQuery();
        myCmd2.ExecuteNonQuery();
        GetTables();
        connection.Close();
    }

    private void GetTables()
    {
        var cmd = connection.CreateCommand();
        cmd.CommandText = "SELECT * FROM exam_collection";
        using var rdr = cmd.ExecuteReader();
        while (rdr.Read())
        {
            Exams.Add(rdr.GetString(0), rdr.GetString(1));
        }
    }

    private async void CreateNewExam()
    {
        if (string.IsNullOrWhiteSpace(NewExamCode))
        {
            await JsRuntime.InvokeAsync<object>("alert", "Please fill in the examcode.");
        }
        else
        {
            NewExamCode.Trim();
            if (Exams.ContainsKey(NewExamCode))
            {
                await JsRuntime.InvokeAsync<object>("alert", "Examcode has already existed!");
                NewExamCode = string.Empty;
            }
            else
            {
                navigationManager.NavigateTo($"/exam-create/{NewExamCode}");
            }
        }
    }
}
