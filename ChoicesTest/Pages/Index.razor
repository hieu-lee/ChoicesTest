@page "/"
@page "/home"
@page "/removed/{RemovedExam}"
@page "/{DoExam:bool}"
@using Microsoft.Data.Sqlite;
@using ChoicesTest.Models;
@using ChoicesTest.Data;
@inject NavigationManager navigationManager;
@inject IJSRuntime JsRuntime;
@inject AppData appData;

<h1>Welcome @user to Exam Access</h1>
@if (loading)
{
    <p>Loading data...</p>
    <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Medium" />
}
else
{
    if (!string.IsNullOrWhiteSpace(user))
    {
        <h5>Available exams:</h5>
        if (!DoExam)
        {
            if (admin)
            {
                if (Exams.Count == 0)
                {
                    <ul>
                        <li>There is no exam avaible yet.</li>
                    </ul>
                }
                else
                {
                    <ul style="max-height:450px;overflow-y:scroll">
                        <Virtualize Items="@Exams.Keys" Context="name">
                            <li><a href="/exam-create/@name/true/@Exams[name].Item1/@Exams[name].Item2.ToString()/@Exams[name].Item3"><img src="document.png" /></a><p>Code: @name<br />Name: @Exams[name].Item1<br />Time limit: @Exams[name].Item2.ToString() minute(s)</p></li>
                        </Virtualize>
                    </ul>
                }
                <hr />
                <h3>Add new exam</h3>
                <MatTextField @bind-Value="NewExamCode" Label="New Examcode"></MatTextField>
                <br />
                <MatButton @onclick="CreateNewExam" Unelevated="true">Add</MatButton>
            }
            else
            {
                <p>
                    This is a product of Hieu Le. This app will allow you to create and do exams.<br />
                    However, in order to be able to create exams, you have to log in as admin.<br />
                    If you are not the admin, you are only able to do exams.
                </p>
                GetHistory();
                <h6>This is your history of doing:</h6>
                <ul style="max-height:375px;overflow-y:scroll">
                    <Virtualize Items="@history.Keys" Context="result">
                        <li><img src="document.png" />Exam: @history[result].examCode<br />Score: @history[result].score.ToString()% at @history[result].time<hr /></li>                   
                    </Virtualize>
                </ul>
            }
        }
        else
        {
            if (Exams.Count == 0)
            {
                <ul>
                    <li>There is no exam avaible yet.</li>
                </ul>
            }
            else
            {
                <ul style="max-height:450px;overflow-y:scroll">
                    <Virtualize Items="@Exams.Keys" Context="name">
                        <li><a href="/do-exam/@name/@Exams[name].Item1/@Exams[name].Item2.ToString()/@Exams[name].Item3"><img src="document.png" /></a><p>Code: @name<br />Name: @Exams[name].Item1<br />Time limit: @Exams[name].Item2.ToString() minute(s)</p></li>
                    </Virtualize>
                </ul>
            }
        }
    }
    else
    {
        <h3>Log in to start using Exam Access</h3>
    }
}



@code {
    [Parameter]
    public bool DoExam { get; set; } = false;
    [Parameter]
    public string RemovedExam { get; set; } = null;
    private bool admin = false;
    private string user = string.Empty;
    private string account = string.Empty;
    private string NewExamCode;
    private SqliteConnection connection;
    private bool loading = true;
    private Dictionary<string, Tuple<string, int, string>> Exams = new();
    private Dictionary<int, ExamResult> history = new();

    private void LoadData()
    {
        user = appData.user;
        admin = appData.admin;
        account = appData.account;
        loading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        if (!appData.inited)
        {
            var task1 = appData.InitializeAsync();
            var taskLoadData = Task.Factory.StartNew(() => { LoadData(); });
            connection = appData.connection;
            connection.Open();
            if (RemovedExam is not null)
            {
                var myCmd = connection.CreateCommand();
                myCmd.CommandText = $"DELETE FROM exam_collection WHERE code = '{RemovedExam}';";
                myCmd.ExecuteNonQuery();
            }
            GetTables();
            connection.Close();
            await task1;
            await taskLoadData;
        }
        else
        {
            var taskLoadData = Task.Factory.StartNew(() => { LoadData(); });
            connection = appData.connection;
            connection.Open();
            if (RemovedExam is not null)
            {
                var task = connection.OpenAsync();
                var myCmd = connection.CreateCommand();
                myCmd.CommandText = $"DELETE FROM exam_collection WHERE code = '{RemovedExam}';";
                await task;
                myCmd.ExecuteNonQuery();
            }
            GetTables();
            connection.Close();
            await taskLoadData;
        }
    }

    private void GetTables()
    {
        var cmd = connection.CreateCommand();
        cmd.CommandText = "SELECT * FROM exam_collection";
        using var rdr = cmd.ExecuteReader();
        while (rdr.Read())
        {
            Exams.Add(rdr.GetString(0), new Tuple<string, int, string>(rdr.GetString(1), rdr.GetInt32(2), rdr.GetString(3)));
        }
    }

    private async void GetHistory()
    {
        history = new();
        var task = connection.OpenAsync();
        var myCmd = connection.CreateCommand();
        myCmd.CommandText = $"SELECT * FROM {account} ORDER BY score DESC";
        await task;
        using var rdr = myCmd.ExecuteReader();
        while (rdr.Read())
        {
            var id = rdr.GetInt32(0);
            if (!history.ContainsKey(id))
            {
                history.Add(rdr.GetInt32(0), new ExamResult() { examCode = rdr.GetString(1), score = rdr.GetDecimal(2), time = rdr.GetString(3) });
            }
        }
        connection.Close();
    }

    private async void CreateNewExam()
    {
        if (string.IsNullOrWhiteSpace(NewExamCode))
        {
            await JsRuntime.InvokeAsync<object>("alert", "Please fill in the examcode.");
            return;
        }
        else
        {
            if (NewExamCode.Contains('\''))
            {
                await JsRuntime.InvokeAsync<object>("alert", "The examcode cannot contain any special characters");
                return;
            }
            NewExamCode.Trim();
            if (Exams.ContainsKey(NewExamCode))
            {
                await JsRuntime.InvokeAsync<object>("alert", "Examcode has already existed!");
                NewExamCode = string.Empty;
                return;
            }
            else
            {
                navigationManager.NavigateTo($"/exam-create/{NewExamCode}");
            }
        }
    }
}
