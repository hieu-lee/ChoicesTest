@page "/"
@page "/home"
@page "/removed/{RemovedExam}"
@page "/{DoExam:bool}"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using MongoDB.Driver;
@using ChoicesTest.Models;
@using ChoicesTest.Data;
@using System.Threading;
@inject ProtectedLocalStorage localStorage;
@inject NavigationManager navigationManager;
@inject IJSRuntime JsRuntime;
@inject AppData appData;

<h1>Welcome @user to Exam Access</h1>
@if (loading)
{
    <p>Loading data...</p>
    <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Medium" />
}
else
{
    if (!string.IsNullOrWhiteSpace(user))
    {
        <h5>Available exams:</h5>
        if (!DoExam)
        {
            if (admin)
            {
                if (Exams.Count == 0)
                {
                    <ul>
                        <li>There is no exam avaible yet.</li>
                    </ul>
                }
                else
                {
                    <ul style="max-height:450px;overflow-y:scroll">
                        <Virtualize Items="@Exams.Keys" Context="name">
                            <li><a href="/exam-create/@name/true/@Exams[name].Item1/@Exams[name].Item3"><img src="document.png" /></a><p>Code: @name<br />Name: @Exams[name].Item1<br />Time limit: @Exams[name].Item2.ToString() minute(s)</p></li>
                        </Virtualize>
                    </ul>
                }
                <hr />
                <h3>Add new exam</h3>
                <MatTextField @bind-Value="NewExamCode" Label="New Examcode"></MatTextField>
                <br />
                <MatButton @onclick="CreateNewExam" Unelevated="true">Add</MatButton>
            }
            else
            {
                <p>
                    This is a product of Hieu Le. This app will allow you to create and do exams.<br />
                    However, in order to be able to create exams, you have to log in as admin.<br />
                    If you are not the admin, you are only able to do exams.
                </p>
                <h6>This is your history of doing:</h6>
                <ul style="max-height:375px;overflow-y:scroll">
                    <Virtualize Items="@history" Context="result">
                        <li><img src="document.png" />Exam: @result.examCode<br />Score: @result.score.ToString()% at @result.time<hr /></li>
                    </Virtualize>
                </ul>
            }
        }
        else
        {
            if (Exams.Count == 0)
            {
                <ul>
                    <li>There is no exam avaible yet.</li>
                </ul>
            }
            else
            {
                <ul style="max-height:450px;overflow-y:scroll">
                    <Virtualize Items="@Exams.Keys" Context="name">
                        <li><a href="/do-exam/@name/@Exams[name].Item1/@Exams[name].Item3"><img src="document.png" /></a><p>Code: @name<br />Name: @Exams[name].Item1<br />Time limit: @Exams[name].Item2.ToString() minute(s)</p></li>
                    </Virtualize>
                </ul>
            }
        }
    }
    else
    {
        <h4>Log in to start using Exam Access</h4>
    }
}



@code {
    [Parameter]
    public bool DoExam { get; set; } = false;
    [Parameter]
    public string RemovedExam { get; set; } = null;

    private IMongoCollection<ExamResult> myUserDb;
    private bool admin = false;
    private string user = string.Empty;
    private string account = string.Empty;
    private string NewExamCode;
    private bool loading = true;
    private Dictionary<string, Tuple<string, int, string>> Exams = new();
    private List<ExamResult> history = new();

    private async void LoadData()
    {
        var resuser = await localStorage.GetAsync<string>("user");
        var resadmin = await localStorage.GetAsync<bool>("admin");
        var resaccount = await localStorage.GetAsync<string>("account");
        if (resuser.Success && resadmin.Success && resaccount.Success)
        {
            admin = resadmin.Value;
            user = resuser.Value;
            loading = false;
            StateHasChanged();
            account = resaccount.Value;
        }
        else
        {
            loading = false;
            StateHasChanged();
            await localStorage.SetAsync("user", string.Empty);
            await localStorage.SetAsync("account", string.Empty);
            await localStorage.SetAsync("admin", false);
            await localStorage.SetAsync("logged", false);
        }
        if (!string.IsNullOrWhiteSpace(account))
        {
            myUserDb = appData.examdb.GetCollection<ExamResult>(account);
        }
        if (!admin)
        {
            if (myUserDb is not null)
            {
                GetHistory();
                StateHasChanged();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!appData.inited)
        {
            appData.Initialize();
            var task = Task.Factory.StartNew(() => GetTables());
            try
            {
                LoadData();
            }
            catch (InvalidOperationException)
            {
                return;
            }
            if (!string.IsNullOrWhiteSpace(RemovedExam))
            {
                Exams.Remove(RemovedExam);
                var filter = Builders<Exam>.Filter.Eq("_id", RemovedExam);
                appData.exams.DeleteOne(filter);
            }
            //connection.Close();
            await task;
        }
        else
        {
            var task = Task.Factory.StartNew(() => GetTables());
            try
            {
                LoadData();
            }
            catch(InvalidOperationException)
            {
                return;
            }
            //connection = appData.connection;
            //connection.Open();
            if (RemovedExam is not null)
            {
                var filter = Builders<Exam>.Filter.Eq("_id", RemovedExam);
                appData.exams.DeleteOne(filter);
            }
            //connection.Close();
            await task;
        }
    }

    private void GetTables()
    {
        var examlist = appData.GetExams();
        Parallel.ForEach(examlist, exam =>
        {
            Exams.Add(exam.code, new Tuple<string, int, string>(exam.name, exam.time, exam.label));
        });
    }

    private void GetHistory()
    {
        history = myUserDb.Find(s => true).ToList();
        if (history.Count > 0)
        {
            history.Sort((a, b) => b.CompareTo(a));
            return;
        }
        StateHasChanged();
    }

    private async void CreateNewExam()
    {
        if (string.IsNullOrWhiteSpace(NewExamCode))
        {
            await JsRuntime.InvokeAsync<object>("alert", "Please fill in the examcode.");
            return;
        }
        else
        {
            if (NewExamCode.Contains('?') || NewExamCode.Contains('/') || NewExamCode.Contains('\\') || NewExamCode.Contains('@') || NewExamCode.Contains('$'))
            {
                await JsRuntime.InvokeAsync<object>("alert", "The examcode cannot contain any special characters");
                return;
            }
            NewExamCode.Trim();
            if (Exams.ContainsKey(NewExamCode))
            {
                await JsRuntime.InvokeAsync<object>("alert", "Examcode has already existed!");
                NewExamCode = string.Empty;
                return;
            }
            else
            {
                navigationManager.NavigateTo($"/exam-create/{NewExamCode}");
            }
        }
    }
}
