@page "/log-in"
@page "/log-in/{register:bool}"
@using Microsoft.Data.Sqlite;
@using ChoicesTest.Data;
@inject IJSRuntime JsRuntime;
@inject NavigationManager navigationManager;
@inject AppData appData;

<h1>Welcome to Exam Access</h1>
@if (loading)
{
    <p>Loading data...</p>
    <div class="spinner-border text-primary"></div>
}
else
{
    if (!logged)
    {
        if (!register)
        {
            <div>
                <MatTextField @bind-Value="@username" Label="Username" Required="true"></MatTextField><br />
                <MatTextField @bind-Value="@password" Label="Password" Type="password" Required="true"></MatTextField><br />
                <p>Don't have an account yet? <a @onclick="() => { username = string.Empty; password = string.Empty; }" href="log-in/true">Register</a></p>
                <MatButton Raised="true" @onclick="SignIn">Log In</MatButton>
            </div>
        }
        else
        {
            <div>
                <MatTextField @bind-Value="@fname" Label="First Name" Required="true"></MatTextField><br />
                <MatTextField @bind-Value="@lname" Label="Last Name" Required="true"></MatTextField><br />
                <MatTextField @bind-Value="@username" Label="Username" Required="true"></MatTextField><br />
                <MatTextField @bind-Value="@password" Label="Password" Type="password" Required="true"></MatTextField><br />
                <MatRadioGroup @bind-Value="admin">
                    <MatRadioButton Value="false" Style="padding-bottom: 13px;"></MatRadioButton><span>User</span>
                    <MatRadioButton Value="true" Style="padding-bottom: 13px;"></MatRadioButton><span>Admin</span>
                </MatRadioGroup><br />
                <MatButton Raised="true" @onclick="SignUp">Sign Up</MatButton>
            </div>
        }
    }
    else
    {
        <h5>You have already logged in</h5>
        <MatButton Raised="true" @onclick="SignOut">Log Out</MatButton>
    }
}


@code {
    [Parameter]
    public bool register { get; set; } = false;
    private bool admin = false;
    private bool loading = true;
    private bool logged;
    private SqliteConnection connection;
    private string fname = string.Empty;
    private string lname = string.Empty;
    private string username = string.Empty;
    string password = string.Empty;
    private Dictionary<string, Tuple<string, string, int>> Accounts = new();


    protected override void OnInitialized()
    {
        connection = appData.connection;
        GetAccounts();
        logged = appData.logged;
        loading = false;
    }

    private void GetAccounts()
    {
        connection.Open();
        var cmd = connection.CreateCommand();
        cmd.CommandText = "SELECT * FROM accounts";
        using var rdr = cmd.ExecuteReader();
        while (rdr.Read())
        {
            if (!Accounts.ContainsKey(rdr.GetString(0)))
            {
                Accounts.Add(rdr.GetString(0), new Tuple<string, string, int>(rdr.GetString(1), rdr.GetString(2), rdr.GetInt16(3)));
            }
        }
        connection.Close();
    }

    private async void SignIn()
    {
        username = username.Trim();
        password = password.Trim();
        if (Accounts.ContainsKey(username))
        {
            if (Accounts[username].Item1 == password)
            {
                appData.user = Accounts[username].Item2;
                appData.account = username;
                appData.logged = true;
                if (Accounts[username].Item3 == 1)
                {
                    appData.admin = true;
                }
                await JsRuntime.InvokeAsync<object>("alert", "Successfully logged in!");
                navigationManager.NavigateTo("/home");
                return;
            }
            else
            {
                await JsRuntime.InvokeAsync<object>("alert", "Your password is incorrect!");
                return;
            }
        }
        else
        {
            await JsRuntime.InvokeAsync<object>("alert", "Your username is incorrect!");
            return;
        }
    }

    private async void SignUp()
    {
        if (string.IsNullOrWhiteSpace(fname) || string.IsNullOrWhiteSpace(lname) || string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
        {
            await JsRuntime.InvokeAsync<object>("alert", "Please fill in all the information!");
            return;
        }
        fname = fname.Trim();
        fname = fname.First().ToString().ToUpper() + fname.Substring(1);
        lname = lname.Trim();
        lname = lname.First().ToString().ToUpper() + lname.Substring(1);
        username = username.Trim();
        if (password.Length < 6 || password.Contains(' '))
        {
            await JsRuntime.InvokeAsync<object>("alert", "The password must have at least 6 characters and not contain any whitespace");
            return;
        }
        GetAccounts();
        if (!Accounts.ContainsKey(username))
        {
            var name = $"{fname} {lname}";
            var task = connection.OpenAsync();
            var myCmd = connection.CreateCommand();
            if (admin)
            {
                myCmd.CommandText = $"INSERT INTO accounts(username, password, name, admin) VALUES('{username}', '{password}', '{name}', 1)";
            }
            else
            {
                myCmd.CommandText = $"INSERT INTO accounts(username, password, name, admin) VALUES('{username}', '{password}', '{name}', 0)";
            }
            var myCmd2 = connection.CreateCommand();
            myCmd2.CommandText = $"CREATE TABLE {username}(id INTEGER PRIMARY KEY AUTOINCREMENT, exam TEXT, score REAL, time TEXT)";
            await task;
            myCmd.ExecuteNonQuery();
            myCmd2.ExecuteNonQuery();
            connection.Close();
            appData.admin = admin;
            admin = false;
            appData.user = name;
            appData.account = username;
            appData.logged = true;
            await JsRuntime.InvokeAsync<object>("alert", "Successfully logged in with your new account!");
            navigationManager.NavigateTo("/home");
        }
        else
        {
            await JsRuntime.InvokeAsync<object>("alert", "Your username has already been taken");
            return;
        }
    }

    private async void SignOut()
    {
        appData.user = string.Empty;
        appData.account = string.Empty;
        appData.admin = false;
        appData.logged = false;
        await JsRuntime.InvokeAsync<object>("alert", "Successfully logged out!");
        logged = false;
        StateHasChanged();
    }
}
