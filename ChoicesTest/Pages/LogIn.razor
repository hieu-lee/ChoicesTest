@page "/log-in"
@page "/log-in/{register:bool}"
@using Microsoft.Data.Sqlite;
@inject IJSRuntime JsRuntime;
@inject NavigationManager navigationManager;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject ProtectedSessionStorage sessionStorage;

<h1>Welcome to Exam Access</h1>
@if (loading)
{
    <p>Loading...</p>
    LoadData();
}
else
{
    if (!logged)
    {
        if (!register)
        {
            <div>
                <input type="text" @bind="username" placeholder="Username" /><br />
                <input style="margin-top: 10px;" type="password" @bind="password" placeholder="Password" /><br />
                <p>Don't have an account yet? <a @onclick="() => { username = string.Empty; password = string.Empty; }" href="log-in/true">Register</a></p>
                <button class="btn btn-primary" @onclick="SignIn">Log In</button>
            </div>
        }
        else
        {
            <div>
                <input type="text" @bind="fname" placeholder="First Name" /><br />
                <input style="margin-top: 10px;" type="text" @bind="lname" placeholder="Last Name" /><br />
                <input style="margin-top: 10px;" type="text" @bind="username" placeholder="Username" /><br />
                <input style="margin-top: 10px;" type="password" @bind="password" placeholder="Password" /><br />
                <button class="btn btn-primary" style="margin-top: 10px;" @onclick="SignUp">Sign Up</button>
            </div>
        }
    }
    else
    {
        <h5>You have already logged in</h5>
        <button class="btn btn-primary" style="margin-top: 10px;" @onclick="SignOut">Log out</button>
    }
}


@code {
    [Parameter]
    public bool register { get; set; } = false;
    private bool loading = true;
    private bool logged;
    private SqliteConnection connection;
    private string fname = string.Empty;
    private string lname = string.Empty;
    private string username = string.Empty;
    string password = string.Empty;
    private Dictionary<string, Tuple<string, string>> Accounts = new();

    private async void LoadData()
    {
        try
        {
            var result = await sessionStorage.GetAsync<string>("user");
            if (result.Success)
            {
                logged = true;
            }
            else
            {
                logged = false;
            }
        }
        catch (Exception)
        {
            await sessionStorage.DeleteAsync("user");
            navigationManager.NavigateTo("/home", true);
        }
        loading = false;
        StateHasChanged();
    }

    protected override Task OnInitializedAsync()
    {
        SqliteConnectionStringBuilder connectionStringBuilder = new();
        connectionStringBuilder.DataSource = "exams.db";
        connection = new(connectionStringBuilder.ConnectionString);
        connection.Open();
        GetAccounts();
        connection.Close();
        return base.OnInitializedAsync();
    }

    private void GetAccounts()
    {
        var cmd = connection.CreateCommand();
        cmd.CommandText = "SELECT * FROM accounts";
        using var rdr = cmd.ExecuteReader();
        while (rdr.Read())
        {
            if (!Accounts.ContainsKey(rdr.GetString(0)))
            {
                Accounts.Add(rdr.GetString(0), new Tuple<string, string>(rdr.GetString(1), rdr.GetString(2)));
            }
        }
    }

    private async void SignIn()
    {
        username = username.Trim();
        password = password.Trim();
        if (Accounts.ContainsKey(username))
        {
            if (Accounts[username].Item1 == password)
            {
                await sessionStorage.SetAsync("user", Accounts[username].Item2);
                await sessionStorage.SetAsync("account", username);
                await JsRuntime.InvokeAsync<object>("alert", "Successfully logged in!");
                navigationManager.NavigateTo("/home");
                return;
            }
            else
            {
                await JsRuntime.InvokeAsync<object>("alert", "Your password is incorrect!");
                return;
            }
        }
        else
        {
            await JsRuntime.InvokeAsync<object>("alert", "Your username is incorrect!");
            return;
        }
    }

    private async void SignUp()
    {
        fname = fname.Trim();
        fname = fname.First().ToString().ToUpper() + fname.Substring(1);
        lname = lname.Trim();
        lname = lname.First().ToString().ToUpper() + lname.Substring(1);
        username = username.Trim();
        if (string.IsNullOrWhiteSpace(fname) || string.IsNullOrWhiteSpace(lname) || string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
        {
            await JsRuntime.InvokeAsync<object>("alert", "Please fill in all the information!");
            return;
        }
        if (password.Length < 6 || password.Contains(' '))
        {
            await JsRuntime.InvokeAsync<object>("alert", "The password must have at least 6 characters and not contain any whitespace");
            return;
        }
        if (!Accounts.ContainsKey(username))
        {
            var name = $"{fname} {lname}";
            if (username == "admin")
            {
                name = "admin";
            }
            var task = connection.OpenAsync();
            var myCmd = connection.CreateCommand();
            myCmd.CommandText = $"INSERT INTO accounts(username, password, name) VALUES('{username}', '{password}', '{name}')";
            if (username != "admin")
            {
                var myCmd2 = connection.CreateCommand();
                myCmd2.CommandText = $"CREATE TABLE {username}(id INTEGER PRIMARY KEY AUTOINCREMENT, exam TEXT, score REAL, time TEXT)";
                await task;
                myCmd.ExecuteNonQuery();
                myCmd2.ExecuteNonQuery();
            }
            else
            {
                await task;
                myCmd.ExecuteNonQuery();
            }
            GetAccounts();
            connection.Close();
            await sessionStorage.SetAsync("user", name);
            await sessionStorage.SetAsync("account", username);
            await JsRuntime.InvokeAsync<object>("alert", "Successfully logged in with your new account!");
            navigationManager.NavigateTo("/home");
        }
        else
        {
            await JsRuntime.InvokeAsync<object>("alert", "Your username has already been taken");
            return;
        }
    }

    private async void SignOut()
    {
        await sessionStorage.DeleteAsync("user");
        await sessionStorage.DeleteAsync("account");
        await JsRuntime.InvokeAsync<object>("alert", "Successfully logged out!");
        loading = true;
        StateHasChanged();
    }
}
