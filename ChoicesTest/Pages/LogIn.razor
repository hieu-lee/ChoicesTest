@page "/log-in"
@page "/log-in/{register:bool}"
@using Microsoft.Data.Sqlite;
@inject IJSRuntime JsRuntime;
@inject NavigationManager navigationManager;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject ProtectedSessionStorage sessionStorage;

<h2>Welcome to Exam Access!</h2>

@if (!register)
{
    <div>
        <input type="text" @bind="username" placeholder="Username" /><br />
        <input style="margin-top: 10px;" type="password" @bind="password" placeholder="Password" /><br />
        <p>Don't have an account yet? <a href="log-in/true">Register</a></p>
        <button class="btn btn-primary" @onclick="SignIn">Log In</button>
    </div>
}
else
{
    username = string.Empty;
    password = string.Empty;
    <div>
        <input type="text" @bind="fname" placeholder="First Name" /><br />
        <input style="margin-top: 10px;" type="text" @bind="lname" placeholder="Last Name" /><br />
        <input style="margin-top: 10px;" type="text" @bind="username" placeholder="Username" /><br />
        <input style="margin-top: 10px;" type="password" @bind="password" placeholder="Password" /><br />
        <button class="btn btn-primary" style="margin-top: 10px;" @onclick="SignUp">Sign Up</button>
    </div>
}

@code {
    [Parameter]
    public bool register { get; set; } = false;
    SqliteConnection connection;
    string fname = string.Empty;
    string lname = string.Empty;
    string username = string.Empty;
    string password = string.Empty;
    Dictionary<string, string> Accounts = new Dictionary<string, string>();

    protected override Task OnInitializedAsync()
    {
        var connectionStringBuilder = new SqliteConnectionStringBuilder();
        connectionStringBuilder.DataSource = "exams.db";
        connection = new SqliteConnection(connectionStringBuilder.ConnectionString);
        connection.Open();
        GetAccounts();
        connection.Close();
        return base.OnInitializedAsync();
    }

    private void GetAccounts()
    {
        var cmd = connection.CreateCommand();
        cmd.CommandText = "SELECT * FROM accounts";
        using var rdr = cmd.ExecuteReader();
        while (rdr.Read())
        {
            Accounts.Add(rdr.GetString(0), rdr.GetString(1));
        }
    }

    private async void SignIn()
    {
        username = username.Trim();
        password = password.Trim();
        if (Accounts.ContainsKey(username))
        {
            if (Accounts[username] == password)
            {
                await sessionStorage.SetAsync("user", username);
                await JsRuntime.InvokeAsync<object>("alert", "Successfully logged in!");
                navigationManager.NavigateTo("/home", true);
                return;
            }
            else
            {
                await JsRuntime.InvokeAsync<object>("alert", "Your password is incorrect!");
                return;
            }
        }
        else
        {
            await JsRuntime.InvokeAsync<object>("alert", "Your username is incorrect!");
            return;
        }
    }

    private async void SignUp()
    {
        fname.Trim();
        fname = fname.First().ToString().ToUpper() + fname.Substring(1);
        lname.Trim();
        lname = lname.First().ToString().ToUpper() + lname.Substring(1);
        username.Trim();
        password.Trim();
        if (!Accounts.ContainsKey(username))
        {
            var name = $"{lname} {fname}";
            var task = connection.OpenAsync();
            var myCmd = connection.CreateCommand();
            myCmd.CommandText = $"INSERT INTO accounts(username, password, name) VALUES('{username}', '{password}', '{name}')";
            await task;
            myCmd.ExecuteNonQuery();
            GetAccounts();
            connection.Close();
            await sessionStorage.SetAsync("user", username);
            await JsRuntime.InvokeAsync<object>("alert", "Successfully logged in with your new account!");
            navigationManager.NavigateTo("/home", true);
        }
    }
}
