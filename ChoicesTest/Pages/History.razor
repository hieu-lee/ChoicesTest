@page "/history"
@using Microsoft.Data.Sqlite;
@using ChoicesTest.Models;
@using ChoicesTest.Data; 
@inject NavigationManager navigationManager;
@inject IJSRuntime JsRuntime;
@inject AppData appData;

<h1>Welcome @user to Exam Access</h1>
@if (loading)
{
    <p>Loading data...</p>
    <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Medium" />
}
else
{
    if (!string.IsNullOrWhiteSpace(user))
    {
        if (admin)
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>User</th>
                        <th>Exam</th>
                        <th>Score</th>
                        <th>Time</th>
                    </tr>
                </thead>
                <tbody>
                    <Virtualize Context="record" Items="@history">
                        <tr>
                            <td>@record.username</td>
                            <td>@record.examCode</td>
                            <td>@record.score.ToString()%</td>
                            <td>@record.time</td>
                        </tr>
                    </Virtualize>
                </tbody>
            </table>
        }
        else
        {
            <h3>Only admin can see the universal record, you can still see your personal record in the home page.</h3>
        }
    }
    else
    {
        <h3>Log in to start using Exam Access</h3>
    }
}


@code {
    private List<ExamResult> history = new();
    private SqliteConnection connection;
    private bool loading = true;
    private bool admin;
    private string user;
    private string account;

    private void LoadData()
    {
        user = appData.user;
        admin = appData.admin;
        account = appData.account;
        loading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        var taskLoadData = Task.Factory.StartNew(() => { LoadData(); });
        history = new();
        var connectionStringBuilder = new SqliteConnectionStringBuilder();
        connectionStringBuilder.DataSource = "exams.db";
        connection = new SqliteConnection(connectionStringBuilder.ConnectionString);
        var task = connection.OpenAsync();
        var myCmd = connection.CreateCommand();
        myCmd.CommandText = $"SELECT * FROM history ORDER BY score DESC";
        await task;
        using var rdr = myCmd.ExecuteReader();
        while (rdr.Read())
        {
            history.Add(new ExamResult() { username = rdr.GetString(1), examCode = rdr.GetString(2), score = rdr.GetDecimal(3), time = rdr.GetString(4) });
        }
        connection.Close();
        await taskLoadData;
    }
}
